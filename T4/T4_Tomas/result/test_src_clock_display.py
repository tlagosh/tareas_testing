# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import src.clock_display as module_0


def test_case_0():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    clock_display_0 = module_0.ClockDisplay(tuple_0)
    var_0 = clock_display_0.increment()


@pytest.mark.xfail(strict=True)
def test_case_1():
    set_0 = set()
    clock_display_0 = module_0.ClockDisplay(set_0)
    var_0 = clock_display_0.increment()
    var_0.str()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bytes_0 = b",\xee\x16\xa6\xdc\xae"
    clock_display_0 = module_0.ClockDisplay(bytes_0)
    clock_display_1 = module_0.ClockDisplay(bytes_0)
    var_0 = clock_display_0.str()
    assert var_0 == "00:00:00:00:00:00"
    var_1 = clock_display_0.invariant()
    var_2 = clock_display_0.invariant()
    var_3 = clock_display_0.increment()
    var_4 = clock_display_0.clone()
    var_2.clone()


@pytest.mark.xfail(strict=True)
def test_case_3():
    set_0 = set()
    clock_display_0 = module_0.ClockDisplay(set_0)
    var_0 = clock_display_0.invariant()
    var_1 = clock_display_0.increment()
    var_1.increase()


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.ClockDisplay(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x9b\xe8\xec\xae\x84y\xd4\x1br"
    clock_display_0 = module_0.ClockDisplay(bytes_0)
    var_0 = clock_display_0.str()
    assert var_0 == "00:00:00:00:00:00:00:00:00"
    var_0.increase()


def test_case_6():
    bool_0 = True
    tuple_0 = (bool_0, bool_0, bool_0)
    clock_display_0 = module_0.ClockDisplay(tuple_0)
    var_0 = clock_display_0.increment()
    var_1 = clock_display_0.clone()


@pytest.mark.xfail(strict=True)
def test_case_7():
    bytes_0 = b"\xd8\xde\x04}\x10?gd\xa9\xde\x84g"
    clock_display_0 = module_0.ClockDisplay(bytes_0)
    var_0 = clock_display_0.increment()
    var_0.reset()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\x0c^@\xf9\x81C\x07m\xabq6q\x01"
    clock_display_0 = module_0.ClockDisplay(bytes_0)
    clock_display_1 = module_0.ClockDisplay(bytes_0)
    var_0 = module_0.ClockDisplay(bytes_0)
    var_1 = clock_display_0.invariant()
    assert var_1 is True
    var_2 = clock_display_0.invariant()
    assert var_2 is True
    var_3 = clock_display_0.increment()
    var_4 = clock_display_0.clone()
    var_2.clone()
